// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shotener_CreateShortURL_FullMethodName  = "/go_url_shortener.Shotener/CreateShortURL"
	Shotener_CreateShortURLs_FullMethodName = "/go_url_shortener.Shotener/CreateShortURLs"
	Shotener_GetShortURL_FullMethodName     = "/go_url_shortener.Shotener/GetShortURL"
)

// ShotenerClient is the client API for Shotener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShotenerClient interface {
	CreateShortURL(ctx context.Context, in *SaveURLRequest, opts ...grpc.CallOption) (*SaveURLResponse, error)
	CreateShortURLs(ctx context.Context, in *BatchURLRequest, opts ...grpc.CallOption) (*BatchURLResponse, error)
	GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error)
}

type shotenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShotenerClient(cc grpc.ClientConnInterface) ShotenerClient {
	return &shotenerClient{cc}
}

func (c *shotenerClient) CreateShortURL(ctx context.Context, in *SaveURLRequest, opts ...grpc.CallOption) (*SaveURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveURLResponse)
	err := c.cc.Invoke(ctx, Shotener_CreateShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerClient) CreateShortURLs(ctx context.Context, in *BatchURLRequest, opts ...grpc.CallOption) (*BatchURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchURLResponse)
	err := c.cc.Invoke(ctx, Shotener_CreateShortURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shotenerClient) GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShortURLResponse)
	err := c.cc.Invoke(ctx, Shotener_GetShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShotenerServer is the server API for Shotener service.
// All implementations must embed UnimplementedShotenerServer
// for forward compatibility.
type ShotenerServer interface {
	CreateShortURL(context.Context, *SaveURLRequest) (*SaveURLResponse, error)
	CreateShortURLs(context.Context, *BatchURLRequest) (*BatchURLResponse, error)
	GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error)
	mustEmbedUnimplementedShotenerServer()
}

// UnimplementedShotenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShotenerServer struct{}

func (UnimplementedShotenerServer) CreateShortURL(context.Context, *SaveURLRequest) (*SaveURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedShotenerServer) CreateShortURLs(context.Context, *BatchURLRequest) (*BatchURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURLs not implemented")
}
func (UnimplementedShotenerServer) GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedShotenerServer) mustEmbedUnimplementedShotenerServer() {}
func (UnimplementedShotenerServer) testEmbeddedByValue()                  {}

// UnsafeShotenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShotenerServer will
// result in compilation errors.
type UnsafeShotenerServer interface {
	mustEmbedUnimplementedShotenerServer()
}

func RegisterShotenerServer(s grpc.ServiceRegistrar, srv ShotenerServer) {
	// If the following call pancis, it indicates UnimplementedShotenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shotener_ServiceDesc, srv)
}

func _Shotener_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shotener_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServer).CreateShortURL(ctx, req.(*SaveURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shotener_CreateShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServer).CreateShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shotener_CreateShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServer).CreateShortURLs(ctx, req.(*BatchURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shotener_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotenerServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shotener_GetShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotenerServer).GetShortURL(ctx, req.(*GetShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shotener_ServiceDesc is the grpc.ServiceDesc for Shotener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shotener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_url_shortener.Shotener",
	HandlerType: (*ShotenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _Shotener_CreateShortURL_Handler,
		},
		{
			MethodName: "CreateShortURLs",
			Handler:    _Shotener_CreateShortURLs_Handler,
		},
		{
			MethodName: "GetShortURL",
			Handler:    _Shotener_GetShortURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}
