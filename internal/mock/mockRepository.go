// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/brotigen23/go-url-shortener/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(shortURL model.ShortURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), shortURL)
}

// Delete mocks base method.
func (m *MockRepository) Delete(username string, shortURL []model.ShortURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", username, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(username, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), username, shortURL)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetByAlias mocks base method.
func (m *MockRepository) GetByAlias(alias string) (*model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlias", alias)
	ret0, _ := ret[0].(*model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlias indicates an expected call of GetByAlias.
func (mr *MockRepositoryMockRecorder) GetByAlias(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlias", reflect.TypeOf((*MockRepository)(nil).GetByAlias), alias)
}

// GetByURL mocks base method.
func (m *MockRepository) GetByURL(url string) (*model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", url)
	ret0, _ := ret[0].(*model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockRepositoryMockRecorder) GetByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockRepository)(nil).GetByURL), url)
}

// GetByUser mocks base method.
func (m *MockRepository) GetByUser(username string) ([]model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", username)
	ret0, _ := ret[0].([]model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockRepositoryMockRecorder) GetByUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockRepository)(nil).GetByUser), username)
}

// Update mocks base method.
func (m *MockRepository) Update(username string, shortURL model.ShortURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", username, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(username, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), username, shortURL)
}
