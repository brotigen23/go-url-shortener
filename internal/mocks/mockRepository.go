// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/brotigen23/go-url-shortener/internal/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/brotigen23/go-url-shortener/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckDBConnection mocks base method.
func (m *MockRepository) CheckDBConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBConnection indicates an expected call of CheckDBConnection.
func (mr *MockRepositoryMockRecorder) CheckDBConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBConnection", reflect.TypeOf((*MockRepository)(nil).CheckDBConnection))
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// DeleteShortURLByAlias mocks base method.
func (m *MockRepository) DeleteShortURLByAlias(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURLByAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURLByAlias indicates an expected call of DeleteShortURLByAlias.
func (mr *MockRepositoryMockRecorder) DeleteShortURLByAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURLByAlias", reflect.TypeOf((*MockRepository)(nil).DeleteShortURLByAlias), arg0)
}

// DeleteShortURLByAliases mocks base method.
func (m *MockRepository) DeleteShortURLByAliases(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShortURLByAliases", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShortURLByAliases indicates an expected call of DeleteShortURLByAliases.
func (mr *MockRepositoryMockRecorder) DeleteShortURLByAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShortURLByAliases", reflect.TypeOf((*MockRepository)(nil).DeleteShortURLByAliases), arg0)
}

// GetAllShortURL mocks base method.
func (m *MockRepository) GetAllShortURL() ([]model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShortURL")
	ret0, _ := ret[0].([]model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllShortURL indicates an expected call of GetAllShortURL.
func (mr *MockRepositoryMockRecorder) GetAllShortURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShortURL", reflect.TypeOf((*MockRepository)(nil).GetAllShortURL))
}

// GetAllUsers mocks base method.
func (m *MockRepository) GetAllUsers() ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepository)(nil).GetAllUsers))
}

// GetAllUsersShortURLS mocks base method.
func (m *MockRepository) GetAllUsersShortURLS() ([]model.UsersShortURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersShortURLS")
	ret0, _ := ret[0].([]model.UsersShortURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersShortURLS indicates an expected call of GetAllUsersShortURLS.
func (mr *MockRepositoryMockRecorder) GetAllUsersShortURLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersShortURLS", reflect.TypeOf((*MockRepository)(nil).GetAllUsersShortURLS))
}

// GetShortURLByAlias mocks base method.
func (m *MockRepository) GetShortURLByAlias(arg0 string) (*model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByAlias", arg0)
	ret0, _ := ret[0].(*model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByAlias indicates an expected call of GetShortURLByAlias.
func (mr *MockRepositoryMockRecorder) GetShortURLByAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByAlias", reflect.TypeOf((*MockRepository)(nil).GetShortURLByAlias), arg0)
}

// GetShortURLByID mocks base method.
func (m *MockRepository) GetShortURLByID(arg0 int) (*model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByID", arg0)
	ret0, _ := ret[0].(*model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByID indicates an expected call of GetShortURLByID.
func (mr *MockRepositoryMockRecorder) GetShortURLByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByID", reflect.TypeOf((*MockRepository)(nil).GetShortURLByID), arg0)
}

// GetShortURLByURL mocks base method.
func (m *MockRepository) GetShortURLByURL(arg0 string) (*model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByURL", arg0)
	ret0, _ := ret[0].(*model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByURL indicates an expected call of GetShortURLByURL.
func (mr *MockRepositoryMockRecorder) GetShortURLByURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByURL", reflect.TypeOf((*MockRepository)(nil).GetShortURLByURL), arg0)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(arg0 int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), arg0)
}

// GetUserByName mocks base method.
func (m *MockRepository) GetUserByName(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockRepositoryMockRecorder) GetUserByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockRepository)(nil).GetUserByName), arg0)
}

// GetUsersShortURLSByID mocks base method.
func (m *MockRepository) GetUsersShortURLSByID(arg0 int) (*model.UsersShortURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersShortURLSByID", arg0)
	ret0, _ := ret[0].(*model.UsersShortURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersShortURLSByID indicates an expected call of GetUsersShortURLSByID.
func (mr *MockRepositoryMockRecorder) GetUsersShortURLSByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersShortURLSByID", reflect.TypeOf((*MockRepository)(nil).GetUsersShortURLSByID), arg0)
}

// GetUsersShortURLSByURLID mocks base method.
func (m *MockRepository) GetUsersShortURLSByURLID(arg0 int) (*model.UsersShortURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersShortURLSByURLID", arg0)
	ret0, _ := ret[0].(*model.UsersShortURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersShortURLSByURLID indicates an expected call of GetUsersShortURLSByURLID.
func (mr *MockRepositoryMockRecorder) GetUsersShortURLSByURLID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersShortURLSByURLID", reflect.TypeOf((*MockRepository)(nil).GetUsersShortURLSByURLID), arg0)
}

// GetUsersShortURLSByUserID mocks base method.
func (m *MockRepository) GetUsersShortURLSByUserID(arg0 int) ([]model.UsersShortURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersShortURLSByUserID", arg0)
	ret0, _ := ret[0].([]model.UsersShortURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersShortURLSByUserID indicates an expected call of GetUsersShortURLSByUserID.
func (mr *MockRepositoryMockRecorder) GetUsersShortURLSByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersShortURLSByUserID", reflect.TypeOf((*MockRepository)(nil).GetUsersShortURLSByUserID), arg0)
}

// SaveShortURL mocks base method.
func (m *MockRepository) SaveShortURL(arg0 model.ShortURL) (*model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURL", arg0)
	ret0, _ := ret[0].(*model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURL indicates an expected call of SaveShortURL.
func (mr *MockRepositoryMockRecorder) SaveShortURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURL", reflect.TypeOf((*MockRepository)(nil).SaveShortURL), arg0)
}

// SaveUser mocks base method.
func (m *MockRepository) SaveUser(arg0 model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockRepositoryMockRecorder) SaveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockRepository)(nil).SaveUser), arg0)
}

// SaveUserShortURL mocks base method.
func (m *MockRepository) SaveUserShortURL(arg0 model.UsersShortURLs) (*model.UsersShortURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserShortURL", arg0)
	ret0, _ := ret[0].(*model.UsersShortURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserShortURL indicates an expected call of SaveUserShortURL.
func (mr *MockRepositoryMockRecorder) SaveUserShortURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserShortURL", reflect.TypeOf((*MockRepository)(nil).SaveUserShortURL), arg0)
}
